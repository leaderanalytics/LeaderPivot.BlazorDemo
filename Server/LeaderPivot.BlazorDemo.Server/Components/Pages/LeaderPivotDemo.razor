@page "/leader-pivot-demo"

<div id="demo-page">
    <div id="page-header">
        <h1>Sales Data</h1>
        <div id="control-panel-container" class="d-flex flex-column p-3">
            <ControlPanel @bind-DisplayGrandTotalOption="DisplayGrandTotalsOption"
                          @bind-DisplayDimensionButtons="DisplayDimensionButtons"
                          @bind-DisplayMeasureSelectors="DisplayMeasureSelectors"
                          @bind-DisplayReloadDataButton="DisplayReloadDataButton"
                          @bind-DisplayHiddenDimSelector="DisplayHiddenDimSelector"
                          @bind-SelectedPivotStyle="SelectedPivotStyle">
            </ControlPanel>
        </div>
    </div>



    <div id="pivot-container">
        <LeaderPivot T="SalesData"
                     DataSource="LoadSalesData"
                     Measures="Measures"
                     Dimensions="Dimensions"
                     DisplayGrandTotals="true"
                     DisplayGrandTotalOption="DisplayGrandTotalsOption"
                     DisplayDimensionButtons="DisplayDimensionButtons"
                     DisplayMeasureSelectors="DisplayMeasureSelectors"
                     DisplayReloadDataButton="DisplayReloadDataButton"
                     DisplayHiddenDimSelector="DisplayHiddenDimSelector"
                     PivotStyle="SelectedPivotStyle"
                     IsBusyChanged="IsBusyChanged">
        </LeaderPivot>
    </div>
</div>

@code {
    [Inject] public IMessageBox MessageBox { get; set; }
    private bool DisplayGrandTotalsOption = true;
    private bool DisplayDimensionButtons = true;
    private bool DisplayMeasureSelectors = true;
    private bool DisplayReloadDataButton = false;
    private bool DisplayHiddenDimSelector = true;
    private LeaderPivotStyle SelectedPivotStyle = new LeaderPivotStyle();
    private string controlPanelStyle = "collapse";
    private SalesDataService SalesDataService = new SalesDataService();
    private List<Measure<SalesData>> Measures;
    private List<Dimension<SalesData>> Dimensions;
    private bool _IsBusy;
    public bool IsBusy
    {
        get => _IsBusy;
        set => _IsBusy = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Measures = SalesDataService.LoadMeasures();
        Dimensions = SalesDataService.LoadDimensions();
    }

    private async Task<IEnumerable<SalesData>> LoadSalesData()
    {
        return SalesDataService.GetSalesData();
    }

    private async Task IsBusyChanged(bool busy)
    {
        if (busy)
             await MessageBox.ShowLoading();
        else
             await MessageBox.HideLoading();
    }
}
