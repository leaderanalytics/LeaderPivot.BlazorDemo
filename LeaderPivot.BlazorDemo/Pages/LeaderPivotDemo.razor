@page "/leaderpivotdemo"
@using LeaderAnalytics.LeaderPivot
@using LeaderAnalytics.LeaderPivot.TestData

<div id="demo-page">
    <div style="display:flex;flex-direction:row;align-items:center;">
        <h1>Sales Data</h1>
        <div class="flex-column p-3" style="margin-left: auto; margin-right: 25px; overflow-x: auto;">
            <ControlPanel DisplayGrandTotalOption="@DisplayGrandTotalsOption"
                          DisplayDimensionButtons="@DisplayDimensionButtons"
                          DisplayMeasureSelectors="@DisplayMeasureSelectors"
                          DisplayReloadDataButton="@DisplayReloadDataButton"
                          PivotStyles="@PivotStyles"
                          SelectedPivotStyle="@SelectedPivotStyle">
            </ControlPanel>
        </div>
    </div>

    @*https://stackoverflow.com/questions/68884700/create-a-scrollable-container-for-a-table-without-fixed-size-that-also-prevents*@

    <div id="pivot-container">
        <LeaderPivot T="SalesData"
                     DataSource="@LoadSalesData"
                     Measures="@SalesDataService.LoadMeasures()"
                     Dimensions="@SalesDataService.LoadDimensions()"
                     DisplayGrandTotals="true"
                     DisplayGrandTotalOption="@DisplayGrandTotalsOption"
                     DisplayDimensionButtons="@DisplayDimensionButtons"
                     DisplayMeasureSelectors="@DisplayMeasureSelectors"
                     DisplayReloadDataButton="@DisplayReloadDataButton"
                     PivotStyle="@SelectedPivotStyle">
        </LeaderPivot>
    </div>
</div>

@code {

    private bool DisplayGrandTotalsOption = true;
    private bool DisplayDimensionButtons = true;
    private bool DisplayMeasureSelectors = true;
    private bool DisplayReloadDataButton = false;
    private List<LeaderPivotStyle> PivotStyles;
    private LeaderPivotStyle SelectedPivotStyle;
    private string controlPanelStyle = "collapse";
    private SalesDataService SalesDataService;

    public LeaderPivotDemo()
    {
        SalesDataService = new SalesDataService();
        PivotStyles = LeaderPivotStyles.Styles;
        SelectedPivotStyle = PivotStyles.First();
    }


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        await base.OnInitializedAsync();
    }

    private bool FilterFunc(SalesData state)
    {
        return true;
    }

    private PagedQueryResult<SalesData> LoadSalesData(PagedQueryArgs args)
    {
        return new PagedQueryResult<SalesData> { Data = SalesDataService.GetSalesData() };
    }
}
